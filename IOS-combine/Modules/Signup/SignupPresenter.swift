//
//  SignupPresenter.swift
//  IOS-combine
//
//  Created by usama farooq on 30/08/2021.
//  Copyright ¬© 2021 VDOTOK. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation

final class SignupPresenter {

    // MARK: - Private properties -
    var output: SingupOutput?
    private unowned let view: SignupViewInterface
    var interactor: SignupInteractorInterface
    private let wireframe: SignupWireframeInterface

    // MARK: - Lifecycle -

    init(
        view: SignupViewInterface,
        interactor: SignupInteractorInterface,
        wireframe: SignupWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
    
    enum Output {
        case showLoading
        case hideLoading
        case show(error: String)
    }
}

// MARK: - Extensions -

extension SignupPresenter: SignupPresenterInterface {
    func signup(with userName: String, email: String, password: String) {
        let request = SignupRequest(fullName: userName, email: email, password: password)
        output?(.showLoading)
        interactor.singup(with: request)
    }
    
    func login() {
        wireframe.navigate(to: .login)
    }
    
}


extension SignupPresenter: SignupInterectorToPresenter {
    
    func didRegister() {
        output?(.hideLoading)
        wireframe.navigate(to: .channel)
    }
    
    func failToRegister(with message: String) {
        output?(.hideLoading)
        output?(.show(error: message))
    }
    
}
