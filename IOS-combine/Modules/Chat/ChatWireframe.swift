//
//  ChatWireframe.swift
//  IOS-combine
//
//  Created by usama farooq on 01/09/2021.
//  Copyright ¬© 2021 VDOTOK. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import iOSSDKConnect
import iOSSDKStreaming

final class ChatWireframe: BaseWireframe<ChatViewController> {

    // MARK: - Private properties -
    var interactor: ChatInteractor?

    private let storyboard = UIStoryboard(name: "Chat", bundle: nil)
    var callingManager: CallingManager
    var streamingManager: StreamingMananger?
    

    // MARK: - Module setup -

    init(client: ChatClient, group: Group, user: User, messages: [ChatMessage], streamingManager: StreamingMananger? = nil, callingManager: CallingManager) {
        let moduleViewController = storyboard.instantiateViewController(ofType: ChatViewController.self)
        self.callingManager = callingManager
        self.streamingManager = streamingManager
        super.init(viewController: moduleViewController)

        self.interactor = ChatInteractor(mqttClient: client, user: user, group: group, messages: messages)
        let presenter = ChatPresenter(view: moduleViewController, interactor: interactor!, wireframe: self, streamingManager: streamingManager!, callingManager: callingManager)
        moduleViewController.presenter = presenter
        presenter.interactor?.presenter = presenter
    }

}

// MARK: - Extensions -

extension ChatWireframe: ChatWireframeInterface {
    func moveToBroadcastOverlay() {
        let vc = BroadcastOverlay()
        vc.modalPresentationStyle = .custom
        vc.modalTransitionStyle = .crossDissolve
        vc.broadCastData.broadcastType = .group
        vc.delegate = self
        navigationController?.present(vc, animated: true, completion: nil)
    }
    
}

extension ChatWireframe: BroadcastOverlayDelegate {
    func didUpdate(broadcastData: BroadcastData) {
        interactor?.moveToSSView(broadcastData: broadcastData)
    }
    
    func moveToCallingView(broadcastData: BroadcastData) {
        navigationController?.dismiss(animated: true, completion: nil)
        
        interactor?.broadcastData = broadcastData
        interactor?.moveToCallingView(broadcastData: broadcastData)
    }
    
    func moveToAudio() {
        let frame = CallingWireframe(screenType: .audioView,streamingManager: streamingManager!, sessionDirection: .outgoing, callingManager: callingManager)
        navigationController?.presentWireframe(frame)
    }
    
    func moveToVideo() {
        let frame = CallingWireframe(screenType: .videoView, session: nil, broadCastData: nil, streamingManager: streamingManager!, sessionDirection: .outgoing, callingManager: callingManager)
        navigationController?.viewControllers.last?.presentWireframe(frame)
        
    }
    
    
    
}
