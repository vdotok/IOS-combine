//
//  ContactInterfaces.swift
//  IOS-combine
//
//  Created by usama farooq on 01/09/2021.
//  Copyright © 2021 VDOTOK. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import iOSSDKConnect
import iOSSDKStreaming

typealias ContactOutput = (ContactPresenter.Output) -> Void
typealias AllUserComplition = ((Result<AllUsersResponse, Error>) -> Void)

protocol ContactWireframeInterface: WireframeInterface {
    func navigate(to : ContactNavigationOptions, client: ChatClient, group: Group?, user: User?, vtokSdk: VTokSDK?)
}

protocol ContactViewInterface: ViewInterface {
}

protocol ContactPresenterInterface: PresenterInterface {
    var interactor: ContactInteractorInterface? {get set}
    var output: ContactOutput? { get set}
    var contacts: [User] {get set}
    var searchContacts: [User] {get set}
    var isSearching: Bool {get set}
    var client: ChatClient? {get set}
    func viewModelDidLoad()
    func viewModelWillAppear()
    func rowsCount() -> Int
    func viewModelItem(row: Int) -> User
    func filterGroups(with text: String)
    func createGroup(with user: User)
    func navigate(to : ContactNavigationOptions, group: Group?)
    func makeCall(mediaType: SessionMediaType, user: User)
}

protocol ContactInteractorInterface: InteractorInterface {
    var presenter: ContactInterectorToPresenter? {get set}
    func createGroup(with groupName: String, participants: [Int])
    func fetchAllUser()
}


protocol ContactInterectorToPresenter: AnyObject {
    func fetchUserSuccess(with users: [User])
    func fetchUserFailure(with error: String)
    func didGroupCreated(with group: Group)
    func didfailedToCreate()
    func alreadyExist(group: Group)
}
