//
//  ContactPresenter.swift
//  IOS-combine
//
//  Created by usama farooq on 01/09/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import iOSSDKConnect

final class ContactPresenter {

    // MARK: - Private properties -

    private unowned let view: ContactViewInterface
    var interactor: ContactInteractorInterface?
    private let wireframe: ContactWireframeInterface
    var contacts: [User] = []
    var searchContacts: [User] = []
    var isSearching: Bool = false
    var output: ContactOutput?
    var client: ChatClient?
    // MARK: - Lifecycle -

    init(
        view: ContactViewInterface,
        interactor: ContactInteractorInterface,
        wireframe: ContactWireframeInterface,
        client: ChatClient
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        self.client = client
    }
    
    func viewModelDidLoad() {
        getUsers()
    }
    
    func viewModelWillAppear() {
        
    }
    
    enum Output {
        case reload
        case showProgress
        case hideProgress
        case failure(message: String)
        case groupCreated(group: Group, isExit: Bool)
        case alreadyCreated(message : String)
    }
}

// MARK: - Extensions -

extension ContactPresenter: ContactPresenterInterface {
  
    
    func rowsCount() -> Int {
        return isSearching ? searchContacts.count : contacts.count
    }
    
    func viewModelItem(row: Int) -> User {
        return isSearching ? searchContacts[row] : contacts[row]
    }
    
    func filterGroups(with text: String) {
        self.searchContacts = contacts.filter({$0.fullName.lowercased().prefix(text.count) == text.lowercased()})
        output?(.reload)
    }
    
    func createGroup(with user: User) {
        guard let myUser = VDOTOKObject<UserResponse>().getData() else {return}
        let groupName: String = myUser.fullName! + " - " + user.fullName
        let request = CreateGroupRequest(groupTitle: groupName, participants: [user.userID], autoCreated: 1)
        interactor?.createGroup(with: request) { [weak self] result in
            guard let self = self else {return}
            self.output?(.hideProgress)
            switch result {
            case .success(let response):
                guard let group = response.group, let isExist = response.isalreadyCreated else {return}
                DispatchQueue.main.async {
                    if isExist {
                        self.output?(.groupCreated(group: group, isExit: true))
                    } else {
                        self.output?(.groupCreated(group: group, isExit: false))
                    }
                }
                
            case .failure(let error):
                self.output?(.failure(message: error.localizedDescription))
                
            }
        }
    }
    
    func navigate(to: ContactNavigationOptions, group: Group? = nil) {
        switch to {
        case .chat:
            guard let client = client,
                  let user = VDOTOKObject<UserResponse>().getData(),
                  let group = group
            else {return }
            wireframe.navigate(to: to, client: client, group: group , user: user)
        case .createGroup:
            guard let client = client
            else {return}
            wireframe.navigate(to: .createGroup, client: client, group: nil, user: nil)
        }

    }
    
}

extension ContactPresenter {
    func getUsers() {
        output?(.showProgress)
        interactor?.fetchAllUser()
    }
}


extension ContactPresenter: ContactInterectorToPresenter {
    
    func fetchUserSuccess(with users: [User]) {
        contacts = users
        searchContacts = users
        
        output?(.hideProgress)
        DispatchQueue.main.async { [weak self] in
            self?.output?(.reload)
        }
       
    }
    
    func fetchUserFailure(with error: String) {
        output?(.hideProgress)
        output?(.failure(message: error))
    }
    
    
}
