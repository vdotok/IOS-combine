//
//  ContactPresenter.swift
//  IOS-combine
//
//  Created by usama farooq on 01/09/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import iOSSDKConnect

final class ContactPresenter {

    // MARK: - Private properties -

    private unowned let view: ContactViewInterface
    private let interactor: ContactInteractorInterface
    private let wireframe: ContactWireframeInterface
    var contacts: [User] = []
    var searchContacts: [User] = []
    var isSearching: Bool = false
    var output: ContactOutput?
    var client: ChatClient?
    // MARK: - Lifecycle -

    init(
        view: ContactViewInterface,
        interactor: ContactInteractorInterface,
        wireframe: ContactWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
    
    func viewModelDidLoad() {
        getUsers()
    }
    
    func viewModelWillAppear() {
        
    }
    
    enum Output {
        case reload
        case showProgress
        case hideProgress
        case failure(message: String)
        case groupCreated(group: Group, isExit: Bool)
        case alreadyCreated(message : String)
    }
}

// MARK: - Extensions -

extension ContactPresenter: ContactPresenterInterface {
  
    
    func rowsCount() -> Int {
        return isSearching ? searchContacts.count : contacts.count
    }
    
    func viewModelItem(row: Int) -> User {
        return isSearching ? searchContacts[row] : contacts[row]
    }
    
    func filterGroups(with text: String) {
        self.searchContacts = contacts.filter({$0.fullName.lowercased().prefix(text.count) == text.lowercased()})
        
    }
    
    func createGroup(with user: User) {
        
    }
    
}

extension ContactPresenter {
    func getUsers() {
        
    }
}
