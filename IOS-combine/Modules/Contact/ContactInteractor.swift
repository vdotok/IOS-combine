//
//  ContactInteractor.swift
//  IOS-combine
//
//  Created by usama farooq on 01/09/2021.
//  Copyright ¬© 2021 VDOTOK. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation

typealias ContactComplition = ((Result<CreateGroupResponse, Error>) -> Void)

final class ContactInteractor {
    
    weak  var presenter: ContactInterectorToPresenter?
    let service: ContactService = ContactService(service: NetworkService())
    let createGroupService: CreateGroupService = CreateGroupService(service: NetworkService())
    var users: [User]?
    
}

// MARK: - Extensions -

extension ContactInteractor: ContactInteractorInterface {
  
    func fetchAllUser() {
       
        service.fetchContacts { [weak self] result in
            guard let self = self else { return }
            switch result {
            case .success(let response):
                self.users = response.users
                guard let users = self.users else {return}
                self.presenter?.fetchUserSuccess(with: users)
            case .failure(let error):
                self.presenter?.fetchUserFailure(with: error.localizedDescription)
                
            }
        }
    }
    
    func createGroup(with groupName: String, participants: [Int]) {
        createGroupService.createGroup(groupName: groupName, participants: participants, autoCreated: 1) { result in
            switch result {
            case .success(let response):
                guard let group = response.group, let isExist = response.isalreadyCreated else {return}
                if isExist {
                    self.presenter?.alreadyExist(group: group)
                } else {
                    self.presenter?.didGroupCreated(with: group)
                }
            case .failure(_):
                self.presenter?.didfailedToCreate()
            }
        }
    }
    

}
