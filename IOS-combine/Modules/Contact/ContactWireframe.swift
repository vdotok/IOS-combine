//
//  ContactWireframe.swift
//  IOS-combine
//
//  Created by usama farooq on 01/09/2021.
//  Copyright ¬© 2021 VDOTOK. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import iOSSDKStreaming
import iOSSDKConnect

final class ContactWireframe: BaseWireframe<ContactViewController> {

    // MARK: - Private properties -

    private let storyboard = UIStoryboard(name: "Contact", bundle: nil)
    var streamingManager: StreamingMananger
    // MARK: - Module setup -

    init(client: ChatClient, streamingManager: StreamingMananger, vtokSdk: VTokSDK, healthManager: HealthManager) {
        let moduleViewController = storyboard.instantiateViewController(ofType: ContactViewController.self)
        self.streamingManager = streamingManager
        super.init(viewController: moduleViewController)
        let interactor = ContactInteractor()
        let presenter = ContactPresenter(view: moduleViewController, interactor: interactor, wireframe: self, client: client, streamingManager: streamingManager, vtokSdk: vtokSdk, healthManager: healthManager)
        interactor.presenter = presenter
        moduleViewController.presenter = presenter
    }

}

// MARK: - Extensions -

extension ContactWireframe: ContactWireframeInterface {
    func navigate(to: ContactNavigationOptions, client: ChatClient, group: Group? = nil, user: User? = nil, vtokSdk: VTokSDK? = nil, healthManager: HealthManager) {
        switch to {
        case .chat:
            guard let group = group,
                  let user = user
            else { return }
            let wireFrame = ChatWireframe(client: client, group: group, user: user, messages: [], vtokSDK: nil, streamingManager: streamingManager, healthManager: healthManager)
            navigationController?.pushWireframe(wireFrame)
        case .createGroup:
            navigationController?.pushWireframe(CreateGroupWireframe(client: client, streamingManager: streamingManager, healthManager: healthManager))
        case .videoCall:
            guard let vtokSdk = vtokSdk else {
                return
            }

            moveToCallingView(with: vtokSdk, user: user, callType: .videoCall)
        case .audioCall:
            guard let vtokSdk = vtokSdk else {
                return
            }
            moveToCallingView(with: vtokSdk, user: user, callType: .audioCall)
        }
    }
    
    private func moveToCallingView(with sdk: VTokSDK,user: User?, callType: SessionMediaType ) {
       
        let callingWireFrame = CallingWireframe(vtokSdk: sdk , participants: nil, screenType: callType == .audioCall ? .oneToOneAudio : .oneToOneVideo, session: nil, contact: [user!], broadCastData: nil, streamingManager: streamingManager, sessionDirection: .outgoing)
        navigationController?.viewControllers.last?.presentWireframe(callingWireFrame)
    }
    

}
