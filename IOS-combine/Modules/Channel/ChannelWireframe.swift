//
//  ChannelWireframe.swift
//  IOS-combine
//
//  Created by usama farooq on 30/08/2021.
//  Copyright ¬© 2021 VDOTOK. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import iOSSDKConnect
import iOSSDKStreaming

final class ChannelWireframe: BaseWireframe<ChannelViewController> {

    // MARK: - Private properties -

    private let storyboard = UIStoryboard(name: "Channel", bundle: nil)
    var streamingManager: StreamingMananger = StreamingMananger()
    var callingManager = CallingManager()
    // MARK: - Module setup -
    let interactor = ChannelInteractor()
    init(broadCastData: BroadcastData? = nil) {
        let moduleViewController = storyboard.instantiateViewController(ofType: ChannelViewController.self)
        super.init(viewController: moduleViewController)
        
        let presenter = ChannelPresenter(view: moduleViewController, interactor: interactor, wireframe: self, streamingManager: streamingManager, callingManager: callingManager)
        interactor.callingManager = callingManager
        moduleViewController.presenter = presenter
        presenter.interactor?.presenter = presenter
    }

}

// MARK: - Extensions -

extension ChannelWireframe: ChannelWireframeInterface {
    func dismissView(sdk: VTokSDK, screenType: ScreenType, broadCastData: BroadcastData, participant: [Participant], user: [User]) {
        navigationController?.dismiss(animated: true, completion: { [weak self] in
            self?.moveToCalling(particinats: participant, users: user, sdk: sdk, broadCastData: broadCastData, screenType: .videoAndScreenShare, session: nil, sessionDirection: .outgoing)
        })
    }
    
    
    func moveToCalling(particinats: [Participant], users: [User], sdk: VTokSDK, broadCastData: BroadcastData?, screenType: ScreenType, session: VTokBaseSession?, sessionDirection: SessionDirection) {
        let frame = CallingWireframe(vtokSdk: sdk, participants: particinats, screenType: screenType, session: session,contact: users, broadCastData: broadCastData, streamingManager: streamingManager, sessionDirection: sessionDirection)
        navigationController?.viewControllers.last?.presentWireframe(frame)
    }
    
    func moveToIncomingCall(callingManager: CallingManager, users: [User],sessionDirection: SessionDirection) {
        let frame = CallingWireframe(vtokSdk: callingManager.vtokSdk!, participants: nil, screenType: .incomingCall, session: callingManager.vtokBaseSession, contact: users, streamingManager: streamingManager, sessionDirection: sessionDirection)
        navigationController?.presentWireframe(frame)
    }
    
    func moveToAudio(sdk: VTokSDK, participants: [Participant], users: [User], sessionDirection: SessionDirection) {
        let frame = CallingWireframe(vtokSdk: sdk, participants: participants, screenType: .audioView, contact: users, streamingManager: streamingManager, sessionDirection: sessionDirection)
        navigationController?.presentWireframe(frame)
    }
    
    func move(to: ChannelNavigationOptions,client: ChatClient, group: Group?, user: User, messages: [ChatMessage], sdk: VTokSDK? = nil, streamingManager: StreamingMananger) {
        switch to {
        case .chat:
            guard let group = group else {return}
            navigationController?.pushWireframe(ChatWireframe(client: client, group: group, user: user, messages: messages, streamingManager: streamingManager, callingManager: callingManager))
        case .broadcastOverlay:
            let vc = BroadcastOverlay()
            vc.modalPresentationStyle = .custom
            vc.modalTransitionStyle = .crossDissolve
            vc.broadCastData.broadcastType = .publicURL
            vc.delegate = self
            navigationController?.present(vc, animated: true, completion: nil)
        }
    }
    
    func moveToCreateGroup(client: ChatClient, sdk: VTokSDK) {
        
        let frame = ContactWireframe(client: client, streamingManager: self.streamingManager, callingManager: callingManager)
        navigationController?.pushWireframe(frame)
    }
    
    func dismissView() {
        navigationController?.dismiss(animated: true, completion: {
    
        })
    }
    
}

extension ChannelWireframe: BroadcastOverlayDelegate {
    func moveToCallingView(broadcastData: BroadcastData) {
        navigationController?.dismiss(animated: true, completion: nil)
        interactor.moveToCallingView(broadcastData: broadcastData)
    }
    
    func didUpdate(broadcastData: BroadcastData) {
        interactor.broadCastData = broadcastData
    }
    
    
}
