//
//  ChannelInteractor.swift
//  IOS-combine
//
//  Created by usama farooq on 30/08/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation

final class ChannelInteractor {
    
    weak var presenter: ChannelInteractorToPresenter?
    let service = ChannelService(service: NetworkService())
    let contactService = ContactService(service: NetworkService())
}

// MARK: - Extensions -

extension ChannelInteractor: ChannelInteractorInterface {
    func fetchUsers() {
        contactService.fetchContacts { [weak self] result in
            guard let self = self else {return}
            switch result {
            case .success(let response):
                switch response.status {
                case 200:
                    self.presenter?.usersFetched(with: response.users)
                default:
                    self.presenter?.usersFetchedFailded(with: response.message)
                }
            case .failure(let error):
                self.presenter?.usersFetchedFailded(with: error.localizedDescription )
            }
        }
    }
    
    func fetchGroups() {
        service.FetchChannels { [weak self] result in
            guard let self = self else {return}
            switch result {
            case .success(let response):
                switch response.status  {
                case 200:
                    guard let group = response.groups else {return}
                    self.presenter?.channelFetched(with: group)
                default:
                    self.presenter?.channelFetchedFailed(with: response.message)
                }
            case .failure(let error):
                self.presenter?.channelFetchedFailed(with: error.localizedDescription)
            }
        }
    }
}
