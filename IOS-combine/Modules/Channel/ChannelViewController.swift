//
//  ChannelViewController.swift
//  IOS-combine
//
//  Created by usama farooq on 30/08/2021.
//  Copyright © 2021 VDOTOK. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import MMWormhole
import iOSSDKStreaming
import MultipeerConnectivity

final class ChannelViewController: UIViewController {
    
    
    // MARK: - Outlets
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var subTitle: UILabel!
    @IBOutlet weak var emptyView: UIView!
    @IBOutlet weak var logoutButton: UIButton!
    @IBOutlet weak var userName: UILabel!
    @IBOutlet weak var blurView: UIView!
    @IBOutlet weak var tableViewTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var viewStatusVideoStream: UIView! {
        didSet {
            viewStatusVideoStream.layer.cornerRadius = viewStatusVideoStream.frame.height/2
        }
    }
    @IBOutlet weak var viewStatus: UIView! {
        didSet {
            viewStatus.layer.cornerRadius = viewStatus.frame.height/2
        }
    }
    lazy var refreshControl = UIRefreshControl()
    
    private var selectedGroupId: Int? = nil
    let navigationTitle = UILabel()
    var incomingCallingView: GroupCallingUpdatedView?
    let wormhole = MMWormhole(applicationGroupIdentifier: AppsGroup.APP_GROUP,
                              optionalDirectory: "wormhole")
    
    // MARK: - Public properties -

    var presenter: ChannelPresenterInterface!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        configureAppearance()
        bindPresenter()
        presenter.viewDidLoad()
        NotificationCenter.default.addObserver(self, selector: #selector(removeCount(notification:)), name: .removeCount, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(didSubscribe(notification:)), name: .didGroupCreated, object: nil)
        
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        configureNavigationBar()
        presenter.viewWillAppear()
        wormhole.listenForMessage(withIdentifier: "sessionHangup") { _ in
            if UIScreen.main.isCaptured {
                if let bannerView = AppDelegate.appDelegate.screenShareBannerView {
                    bannerView.removeFromSuperview()
                }
            }
        }
        if presenter.streamingManager.activeSession() != 0 {
            showSmallView()
        } else {
            self.tableViewTopConstraint.constant = 0
        }
        
        showBroadCastBanner()
        
        if presenter.streamingManager.activeSession() == 0 && AppDelegate.appDelegate.smallCallingView != nil {
            AppDelegate.appDelegate.smallCallingView.removeFromSuperview()
            AppDelegate.appDelegate.smallCallingView = nil
        }
        
        NotificationCenter.default.addObserver(self, selector: #selector(didTapHangup), name: Notification.Name.hangup, object: nil)
   
    }
    
    
    
    
    @objc func showSmallView() {
        DispatchQueue.main.async { [weak self] in
            self?.tableViewTopConstraint.constant = 140
        }
        if let smallCallingView = AppDelegate.appDelegate.smallCallingView {
            smallCallingView.removeFromSuperview()
            AppDelegate.appDelegate.smallCallingView = nil
        }
        
        let manager = presenter.streamingManager
        manager.vtokSDK = presenter.vtokSDK
        AppDelegate.appDelegate.smallCallingView = SmallCallingView.getView(streamingManager: manager)
        AppDelegate.appDelegate.smallCallingView?.getUserStream()
        UIApplication.shared.windows.first!.addSubview(AppDelegate.appDelegate.smallCallingView)
        AppDelegate.appDelegate.smallCallingView?.addConstraintsFor(width: self.view.frame.width, and: 140)
        AppDelegate.appDelegate.smallCallingView?.addTopConstraint(size: self.topbarHeight)
    }
    
    func showBroadCastBanner() {
        
        guard AppDelegate.appDelegate.screenShareBannerView == nil else {
            if !UIScreen.main.isCaptured {
                AppDelegate.appDelegate.screenShareBannerView.removeFromSuperview()
                AppDelegate.appDelegate.screenShareBannerView = nil
            }
            return
        }
        
        if UIScreen.main.isCaptured && presenter.streamingManager.activeSession() == 0 {
            DispatchQueue.main.async { [weak self] in
                self?.tableViewTopConstraint.constant = 20
            }
            
            AppDelegate.appDelegate.screenShareBannerView?.removeFromSuperview()
            AppDelegate.appDelegate.screenShareBannerView = ScreenShareBannerView.getView(streamingManager: presenter.streamingManager)
            UIApplication.shared.windows.first!.addSubview(AppDelegate.appDelegate.screenShareBannerView)
            AppDelegate.appDelegate.screenShareBannerView?.addConstraintsFor(width: self.view.frame.width, and: 20)
            AppDelegate.appDelegate.screenShareBannerView?.addTopConstraint(size: self.topbarHeight)
        }
        
        if !UIScreen.main.isCaptured && AppDelegate.appDelegate.screenShareBannerView != nil {
            AppDelegate.appDelegate.screenShareBannerView.removeFromSuperview()
            AppDelegate.appDelegate.screenShareBannerView = nil
            
        }
        
        
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        NotificationCenter.default.removeObserver(self, name: Notification.Name.hangup, object: nil)
    }
    
    deinit {
        NotificationCenter.default.removeObserver(self)
    }
    
    @objc private func didSubscribe(notification: NSNotification) {
        let userInfo = notification.userInfo as! [String: AnyObject]
        guard let model = userInfo["model"] as? Group else {
            return
        }
        presenter.groups.insert(model, at: 0)
        presenter.subscribe(group: model)
        
    }
    
    @IBAction func didTapReferesh(_ sender: UIButton) {
        presenter.fetchGroups()
    }
    
    @IBAction func didTapNewChat(_ sender: UIButton) {
//        didTappedAdd()
        didTappedAdd()
    }
    
    @IBAction func didTapLogout(_ sender: UIButton) {
        let defaults = UserDefaults.standard
        defaults.removeObject(forKey: "UserResponse")
        defaults.synchronize()
        presenter.logout()
        navigationController?.presentWireframe(LoginWireframe())

    }
    
    @objc func didTapHangup() {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else {return}
            AppDelegate.appDelegate.smallCallingView?.removeFromSuperview()
            self.tableViewTopConstraint.constant = 0
            AppDelegate.appDelegate.smallCallingView = nil
        }
    }
    
    private func bindPresenter() {
        presenter.channelOutput = { [unowned self]  output in
            switch output {
            case .reload:
                refreshControl.endRefreshing()
                tableView(isHidden: presenter.channelsCount() > 0 ? false : true)
                tableView.reloadData()
                
            case .showProgress:
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                    ProgressHud.show(viewController: self)
                }
            case .hideProgress:
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                    ProgressHud.hide()
                }
                
                
            case .failure(message: let message):
                DispatchQueue.main.async {
                    ProgressHud.showError(message: message, viewController: self)
                }
            case .connected(let sdkType):
                if sdkType == SDKType.chat {
                    viewStatus.backgroundColor = .green
                } else if sdkType == .stream {
                    viewStatusVideoStream.backgroundColor = .green
                }
            case .disconnected(let sdkType):
                if sdkType == SDKType.chat {
                    viewStatus.backgroundColor = .red
                } else if sdkType == .stream {
                    viewStatusVideoStream.backgroundColor = .red
                }
            }
        }
    }
    
    @objc private func removeCount(notification: NSNotification) {
        let userInfo = notification.userInfo as! [String: AnyObject]
        guard let channelName = userInfo["channelName"] as? String else { return }
        guard let chats = userInfo["chatMessages"] as? [ChatMessage] else {return}
        presenter.messages[channelName] = chats
        presenter.unreadMessages[channelName]?.removeAll()
        presenter.removeMessages(with: channelName)
    }

    func configureNavigationBar() {
        let broadCast = UIButton(frame: CGRect(x: 0, y: 0, width: 25, height: 25))
        broadCast.setImage(UIImage(named: "public-broadcast"), for: .normal)
        broadCast.addTarget(self, action: #selector(didTapBroadCast), for: .touchUpInside)
        let leftItem = UIBarButtonItem(customView: navigationTitle)
        let broadCastBarButton =  UIBarButtonItem(customView: broadCast)
        self.navigationItem.leftBarButtonItem = leftItem
        let image = UIImage(named: "plus")?.withRenderingMode(.alwaysOriginal)
        let addButton = UIBarButtonItem(image: image, style: .plain, target: self, action: #selector(didTappedAdd))
        
        let locationImage = UIImage(systemName: "location")?.withRenderingMode(.alwaysOriginal)
        let locationButton = UIBarButtonItem(image: locationImage, style: .plain, target: self, action: #selector(locationButtonTapped))
        
        
        navigationItem.rightBarButtonItems = [addButton,broadCastBarButton,locationButton ]
        
        if presenter.streamingManager.activeSession() != 0 {
            broadCast.tintColor = .appGreyColor
            broadCast.isEnabled = false
        } else {
            broadCast.tintColor = .appDarkGreenColor
            broadCast.isEnabled = true
        }
        
    }
    
    @objc func locationButtonTapped() {
        let vc = AvailableDevicesController()
        vc.modalPresentationStyle = .custom
        vc.modalTransitionStyle = .crossDissolve
    //    vc.peerID = sameNetworkConnectionManager?.devices ?? []
        vc.peerID = presenter.fetchPeers()
        vc.delegate = self
        present(vc, animated: true, completion: nil)
    }
}

// MARK: - Extensions -

extension ChannelViewController {
    func configureAppearance() {
        guard let user = VDOTOKObject<UserResponse>().getData() else {return}
        userName.text = user.fullName
        tableView.delegate = self
        tableView.dataSource = self
        tableView.register(UINib(nibName: "ChannelCell", bundle: nil), forCellReuseIdentifier: "ChannelCell")
        configureEmptyView()
        navigationTitle.text = "Chat Rooms"
        navigationTitle.font = UIFont(name: "Manrope-Medium", size: 20)
        navigationTitle.textColor = .appDarkGreenColor
        navigationTitle.sizeToFit()
        refreshControl.attributedTitle = NSAttributedString(string: "")
        refreshControl.addTarget(self, action: #selector(refresh), for: .valueChanged)
        tableView.addSubview(refreshControl)
    }
    
    @objc func refresh() {
        presenter.fetchGroups()
    }
    
    @objc func didTapBroadCast() {
        presenter.navigation(to: .broadcastOverlay, messages: [], group: nil)
    }
    
    @objc func didTappedAdd() {
        presenter.moveToCreateGroup()
    }
    
    private func configureEmptyView() {
        titleLabel.textColor = .appDarkGreenColor
        titleLabel.font = UIFont(name: "Inter-Regular", size: 21)
        subTitle.textColor = .appLightIndigoColor
        subTitle.font = UIFont(name: "Poppins-Regular", size: 14)
        logoutButton.tintColor = .appIndigoColor
        logoutButton.titleLabel?.font = UIFont.init(name: "Manrope-Bold", size: 14)
    }
    private func tableView(isHidden: Bool) {
        if isHidden {
            tableView.isHidden = isHidden
            emptyView.isHidden = !isHidden
        } else {
            tableView.isHidden = isHidden
            emptyView.isHidden = !isHidden
        }
        
    }
}

extension ChannelViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if presenter.isSearching {
            return 0
        }
        return presenter.channelsCount()
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "ChannelCell", for: indexPath) as! ChannelCell
        cell.selectionStyle = .none
        guard let item = presenter.itemAt(row: indexPath.row) else {return UITableViewCell()}
        cell.configure(with: item.group,
                       online: item.presentParticipant + 1,
                       lastMessage: item.lastMessage,
                       unreadCount: item.unReadMessageCount)
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let channel = presenter.groups[indexPath.row].channelName
        let topic =  presenter.messages[channel]
        let selectedGroup = presenter.groups[indexPath.row]
        presenter.callingManager?.contacts = presenter.contacts
        presenter.callingManager?.group = selectedGroup
        presenter.navigation(to: .chat, messages: topic ?? [], group: presenter.groups[indexPath.row])
    }
    
    public func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        
        
        let edit = UIContextualAction(style: .normal,
                                      title: "Edit") { [weak self] (action, view, completionHandler) in
            self?.selectedGroupId = indexPath.row
            self?.loadGroupView()
            completionHandler(true)
        }
        let trash = UIContextualAction(style: .destructive,
                                       title: "Delete") { [weak self] (action, view, completionHandler) in
            self?.presenter.deleteGroup(with: indexPath.row)
            completionHandler(true)
        }
      
        guard let userData = VDOTOKObject<UserResponse>().getData(), let userId = userData.userID else {return nil}
        
        if userId == presenter.groups[indexPath.row].adminID {
            let configuration = UISwipeActionsConfiguration(actions: [edit, trash])
            return configuration
        }
        let configuration = UISwipeActionsConfiguration(actions: [trash])
        return configuration
        
    }
    
}



extension ChannelViewController: ChannelViewInterface {
}


extension ChannelViewController {
    func loadGroupView() {
        let vc = CreateGroupPopUp()
        vc.modalPresentationStyle = .custom
        vc.modalTransitionStyle = .crossDissolve
        present(vc, animated: true, completion: nil)
        vc.delegate = self
        blurView.isHidden = false
    }
}

extension ChannelViewController: PopupDelegate {
    func didTapDismiss(groupName: String?) {
        blurView.isHidden = true
        guard let id = selectedGroupId, let name = groupName else {return}
        blurView.isHidden = true
        presenter.editGroup(with: name, id: id)
    }
    
    
}

extension ChannelViewController: AvailableDeviceDelegate {
    func didSelect(peer: MCPeerID) {
        guard let user = VDOTOKObject<UserResponse>().getData(),
              let sdk = presenter.vtokSDK
        else {return}
        sdk.invitePeer(peer: peer, refID: user.refID!)
    }
    
}
