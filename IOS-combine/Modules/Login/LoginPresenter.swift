//
//  LoginPresenter.swift
//  IOS-combine
//
//  Created by usama farooq on 30/08/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import Foundation

final class LoginPresenter {
    
    // MARK: - Private properties -
    var output: LoginOutput?
    private unowned let view: LoginViewInterface
    var interactor: LoginInteractorInterface?
    private let wireframe: LoginWireframeInterface
    
    
    // MARK: - Lifecycle -
    
    init(
        view: LoginViewInterface,
        interactor: LoginInteractorInterface,
        wireframe: LoginWireframeInterface
    ) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
    }
    
    enum Output {
        case showLoading
        case hideLoading
        case showError(with: String)
    }
}

// MARK: - Extensions -

extension LoginPresenter: LoginPresenterInterface {
 
    
    func viewDidLoad() {
        
    }
    
    func login(with email: String, password: String) {
        output?(.showLoading)
        interactor?.login(with: email, password: password)
    }
    
    func signup() {
        wireframe.navigate(to: .signup)
    }
    
}


extension LoginPresenter: loginInteractorToPresenterInterface {
    func loginFail(with error: String) {
        output?(.hideLoading)
        output?(.showError(with: error))
    }
    
    func loginSucces() {
        output?(.hideLoading)
        wireframe.navigate(to: .channel)
    }
    
    
}
